<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on SinLucidious</title>
    <link>/categories/programming/index.xml</link>
    <description>Recent content in Programming on SinLucidious</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2017 - 2018, rlc4u; all rights reserved.</copyright>
    <atom:link href="/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Simply Said - Deploying Hugo On AWS</title>
      <link>/blog/2017/03/31/deploy-blog/</link>
      <pubDate>Fri, 31 Mar 2017 13:50:46 +0200</pubDate>
      
      <guid>/blog/2017/03/31/deploy-blog/</guid>
      <description>

&lt;h2 id=&#34;p-class-intro-deploying-hugo-on-aws-p&#34;&gt;&lt;p class = &#34;intro&#34;&gt;Deploying Hugo On AWS&lt;/p&gt;&lt;/h2&gt;

&lt;p&gt;Initially, I have been using Web Hosting Hub with wordpress installed with it to run my website. I got my domain name from OpenSRS. I am quite happy with their services and support. However, It has come to the point that I am clearly paying too much for just hosting a blog which stood at about 13 bucks a month.&lt;/p&gt;

&lt;p&gt;This is where I chanced upon Amazon Web Services. Not being a good front-end developer, I went around in search of a template where I found Hugo, a static web builder developed with Golang. Below list the ways i went around trying to switch from web hosting hub to AWS. It was a rather fruitful experience as my overhead became less than 1 dollar a month.&lt;/p&gt;

&lt;p&gt;Feel free to view a step by step tutorial on deploying hugo with Amazon Web Services by &lt;a href=&#34;http://bezdelev.com/post/hugo-aws-lambda-static-website/&#34;&gt;Ilya Bezdelev&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a nutshell, key points that you should note involves:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hugo website

&lt;ul&gt;
&lt;li&gt;Follow Hugo Tutorial on Creating Website &lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;example.com bucket

&lt;ul&gt;
&lt;li&gt;serves the website content&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;www.example.com bucket

&lt;ul&gt;
&lt;li&gt;redirects to example.com endpoint&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;input.example.com bucket&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;contains all hugo related files&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Default AWS Endpoint Domain Name&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Storage Buckets (used for containing Hugo files and serving web pages to visitors to site)&lt;/li&gt;
&lt;li&gt;Lambda ( piece of code that triggers downloading of static files from hugo input to output bucket)
&lt;/br&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Custom Domain Name&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CloudFront Distribution (CDN)&lt;/li&gt;
&lt;li&gt;Route 53
&lt;/br&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Security of AWS resources will be managed by Identity &amp;amp; Access Management(IAM)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;AWS CloudFront consist of CDN which helps to speed up your website by&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Route 53 is used as a DNS Service as well as Domain Name Registration&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Amazon Route 53 is an authoritative Domain Name System (DNS) service. DNS is the system that translates human-readable domain names (example.com) into IP addresses (192.0.2.0). With authoritative name servers in data centers all over the world, Route 53 is reliable, scalable, and fast.
TLD = Top Level Domain&lt;/p&gt;

&lt;p&gt;With all these in hand, Begin your journey to hosting your very own blog.&lt;/p&gt;

&lt;p&gt;Remember &amp;ndash;&amp;gt; Create Hugo Website &amp;ndash;&amp;gt; Create AWS Web Service &amp;ndash;&amp;gt; Create S3 to store Hugo Files &amp;ndash;&amp;gt; DNS with hosted zone to serve your example.com to the world.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simply Said - Types of Developers</title>
      <link>/blog/2017/03/17/developer-stack/</link>
      <pubDate>Fri, 17 Mar 2017 13:50:46 +0200</pubDate>
      
      <guid>/blog/2017/03/17/developer-stack/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Congratulations to taking your first step into the world of development. When you hear the word &amp;ldquo;programmer&amp;rdquo;, what first comes to your mind? Are there different type of programmers? If they are, what kind of programmers are they?&lt;/p&gt;

&lt;p&gt;Generically speaking, there are many different types of programmers. Each with different roles, skillsets and mindset. In today&amp;rsquo;s context, I will be talking about 5 different kind of programmers. So lets begin!&lt;/p&gt;

&lt;p&gt;Programmers are broken down into:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web Developers

&lt;ul&gt;
&lt;li&gt;Short Answer: They build and maintain website. You can get a more detailed explaination &lt;a href=&#34;http://www.theodinproject.com/courses/introduction-to-web-development/lessons/what-a-web-developer-does&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Application Developer&lt;/li&gt;
&lt;li&gt;Game Developer&lt;/li&gt;
&lt;li&gt;UI Developer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you branch into any of the fields, all of them will have 2 different sub-categories which will be front-end and back-end developer. So your title could be something like a Front-End Web Developer or a Back-End Application Developer. For the more ambitious, they can proceed to becoming a full-stack developer whereby they would be able to handle both the front-end and back-end aspect of the application that they are building.&lt;/p&gt;

&lt;h3 id=&#34;important-distinctions&#34;&gt;Important Distinctions&lt;/h3&gt;

&lt;h4 id=&#34;front-end-developer&#34;&gt;Front-End Developer?&lt;/h4&gt;

&lt;p&gt;&amp;ldquo;Front End&amp;rdquo; typically refers to the stuff that you actually see on the website in the browser. Languages that they primarily focus on includes: HTML, CSS, Javascript, JQuery and React.js. Despite being in charge of making things that appear to the visitor&amp;rsquo;s eyes, the &amp;ldquo;pretty&amp;rdquo; website is still designed by another person with the role of a &amp;ldquo;designer&amp;rdquo;. Some of the things they do include making buttons, menus, formatting of texts, transitions and modals.&lt;/p&gt;

&lt;h4 id=&#34;back-end-developer&#34;&gt;Back-End Developer?&lt;/h4&gt;

&lt;p&gt;&amp;ldquo;Back End&amp;rdquo; typically refers to the stuff that happens behind-the-scene. They are more focused on connecting the website request to the correct services which would include ensuring that the right data are passing through the browswer, connecting services to databases, implementing infrasture and mapping the ports of the services. They ensure that all the buttons and data collected are moving as intended.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>