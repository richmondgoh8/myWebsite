<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on SinLucidious</title>
    <link>/post/</link>
    <description>Recent content in Posts on SinLucidious</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Richmond Goh</copyright>
    <lastBuildDate>Sat, 11 Nov 2017 13:50:46 +0200</lastBuildDate>
    <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Why I Love Corona</title>
      <link>/2017/11/11/love4corona/</link>
      <pubDate>Sat, 11 Nov 2017 13:50:46 +0200</pubDate>
      
      <guid>/2017/11/11/love4corona/</guid>
      <description>

&lt;h2 id=&#34;sample-corona-projects:71df7115a83e93116fc98b1ddc3f2827&#34;&gt;Sample Corona Projects&lt;/h2&gt;

&lt;p&gt;Before I begin, I thought I should start out by showing you some screenshots of the application that I have created! Namely: Sleep Tight and The Daily Dose.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/Together.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-do-i-use-corona-for:71df7115a83e93116fc98b1ddc3f2827&#34;&gt;What Do I Use Corona For?&lt;/h2&gt;

&lt;p&gt;Currently, I primarily use Corona SDK for Business Mobile Application in which I publish onto the Google Play Store.&lt;/p&gt;

&lt;h2 id=&#34;is-corona-worth-learning:71df7115a83e93116fc98b1ddc3f2827&#34;&gt;Is Corona Worth Learning?&lt;/h2&gt;

&lt;p&gt;Currently Corona SDK is primarily used with Lua Programming Language which is easy to learn. It took me about 1 week to get used to the syntax and built a simple mobile application prototype. (I Only had about 1 year of C# Experience) at that time.&lt;/p&gt;

&lt;h2 id=&#34;why-corona-is-good-for-business-app-development:71df7115a83e93116fc98b1ddc3f2827&#34;&gt;Why Corona is Good for Business App Development&lt;/h2&gt;

&lt;p&gt;It is perfect for business application as they have no problem rendering everything required of a business app which ranges from buttons to table views. On top of that, it also has native libraries which speeds up the processes. It has one of the best &amp;ldquo;Real-Time&amp;rdquo; Simulator whereby it has instant feedback and look almost exactly as how it would look like on the device!&lt;/p&gt;

&lt;h2 id=&#34;why-i-choose-to-develop-using-corona:71df7115a83e93116fc98b1ddc3f2827&#34;&gt;Why I Choose to develop using Corona&lt;/h2&gt;

&lt;p&gt;I have been tinkering with Unity, Zero Engine, Titanium, Eclipse and Xamarin. All of them posed to be a challange to create a fully functional application due to the complexity of the documentation and programming language that follows with them. On top of them, None of their simulator could compare to that of Corona. The best part about Corona is the Code Exchange which is wonderful for newbie and veterans alike as it contains all sort of plugins, libraries and code snippet which could help you irregardless of your imagination.&lt;/p&gt;

&lt;h2 id=&#34;corona-pricing:71df7115a83e93116fc98b1ddc3f2827&#34;&gt;Corona Pricing&lt;/h2&gt;

&lt;p&gt;Did I mention? Corona is Free to publish and do not take any of your earning from the store. It is not limited to just Mobile Development but also to severe different other platforms such as Windows.&lt;/p&gt;

&lt;h2 id=&#34;corona-services:71df7115a83e93116fc98b1ddc3f2827&#34;&gt;Corona Services&lt;/h2&gt;

&lt;p&gt;Unlike other engines and services, Corona actually care, during a time where there was a Google Play Store Path Traversal and someone complained about it, It took them no longer than a few days to fix the issues! Applaud for them for catching and fixing bugs so quickly.&lt;/p&gt;

&lt;p&gt;All in all, Corona is wonderful for developers of all levels to create application. You can also easily prototype something out with Corona for a presentation which is a ++ point. Thank you all for taking your time to read my post. Hope you all will give &lt;a href=&#34;https://coronalabs.com&#34;&gt;Corona&lt;/a&gt; a chance to change your life!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo CI</title>
      <link>/2017/05/05/hugoci/</link>
      <pubDate>Fri, 05 May 2017 13:50:46 +0200</pubDate>
      
      <guid>/2017/05/05/hugoci/</guid>
      <description>

&lt;h2 id=&#34;sneak-preview:a783305e21ff89e0ce72669081c3d052&#34;&gt;Sneak Preview&lt;/h2&gt;

&lt;p&gt;Today&amp;rsquo;s Topic will be all about Continuous Integration for &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; Deployment! Click on the link to find out more but in a nutshell, it is a pretty neat tool for hosting a static website! The thing is that now that you are done creating your website with Hugo tool in localhost. You are ready to let it run public for the whole wide world to know! After browsing tutorials after tutorials and scanning through providers, i realized that hosting providers are definitely not the way to go and to keep cost low, I have decided to use Amazon S3 Storage.&lt;/p&gt;

&lt;h1 id=&#34;manual-labor-sucks:a783305e21ff89e0ce72669081c3d052&#34;&gt;Manual Labor Sucks!&lt;/h1&gt;

&lt;p&gt;Essentially, If you do it manually, what you would do is create a bucket in S3 with the name &amp;ldquo;example.com&amp;rdquo;. Followed by which you would proceed to run the command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Generate Public Folder
hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You would then place the public folder into the bucket, if you enable static website hosting under the properties tab of the bucket, it will now provide you an endpoint for you to use to access to your website! This is all good unless you realize that you have to constantly log into the amazon cloud console and run the hugo command, empty the bucket and place the files all over again.&lt;/p&gt;

&lt;p&gt;Follow this optional &lt;a href=&#34;http://bezdelev.com/post/hugo-aws-lambda-static-website/&#34;&gt;tutorial&lt;/a&gt; to get a domain name to be integrated with your bucket. Note that you need not follow the part where it requires the lambda functions. You would only need example.com as the storage for the public content and www.example.com as a redirect to example.com.&lt;/p&gt;

&lt;p&gt;What we want now is to use a tool called &lt;a href=&#34;https://github.com/s3tools/s3cmd&#34;&gt;s3cmd&lt;/a&gt; which seeks to helps us to configure our command line to &lt;a href=&#34;https://kramerc.com/2013/10/23/deploying-to-s3-upon-git-push/&#34;&gt;sync content&lt;/a&gt; across from our local repository to our s3 bucket.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
#
# Deploy to s3 when master gets updated.
#
# This expects (and does NOT check for) s3cmd to be installed and configured!
# This expects (and does NOT check for) hugo to be installed and on your $PATH

bucket=&#39;example.com&#39;
prefix=&#39;&#39;

branch=$(git rev-parse --abbrev-ref HEAD)

if [[ &amp;quot;$branch&amp;quot; == &amp;quot;master&amp;quot; ]]; then
  hugo
  echo &amp;quot;Syncing public/* with s3://$bucket/$prefix.&amp;quot;
  s3cmd --acl-public --delete-removed --no-progress sync public/* s3://$bucket/$prefix
  echo -e &amp;quot;\nUpdated s3://$bucket/$prefix.&amp;quot;
else
  echo &amp;quot;*** s3://$bucket/$prefix only syncs when master branch is updated! ***&amp;quot;
fi

exit 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/br&gt;
Above is a sample post-commit code from git which helps to sync content to s3 bucket which is trigger by git push. Thats all folks and you have a updated website just by running the commands!
git add.
git commit -m &amp;ldquo;First Commit&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DevOps</title>
      <link>/2017/04/28/devops/</link>
      <pubDate>Fri, 28 Apr 2017 13:50:46 +0200</pubDate>
      
      <guid>/2017/04/28/devops/</guid>
      <description>

&lt;h1 id=&#34;behold-automation-at-it-s-finest:99c9919f0ba2753582d3f233ea09eaec&#34;&gt;Behold Automation at it&amp;rsquo;s Finest&lt;/h1&gt;

&lt;p&gt;Today&amp;rsquo;s Topic will be all about Continous Integration! Let&amp;rsquo;s Imagine this scenario, right now you are done with creating an awesome service that is capable of crawling the whole wide web or doing an e-commerce store. The problem now is that, you have to generate your own api blueprints (documentation), you have to manually deploy it to the cloud, make use of kubenetes settings. What is there was a way to automate all this these. By simply pushing to the Repository, all those manual labor will be done for you behind the scenes!&lt;/p&gt;

&lt;p&gt;(Pst, we will also be using &lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/&#34;&gt;kubernetes&lt;/a&gt; for automate deployment!)&lt;/p&gt;

&lt;h2 id=&#34;laying-the-ground-work:99c9919f0ba2753582d3f233ea09eaec&#34;&gt;Laying the Ground-Work&lt;/h2&gt;

&lt;p&gt;Of course, laying the ground work is no menial task. Before we begin, lets lay some &amp;ldquo;rules&amp;rdquo;. The rules are that you should have already built a minimum of one service and is not bias(negative light) against google cloud platform services.&lt;/p&gt;

&lt;p&gt;Process is as follows:
Local Repository &amp;ndash;&amp;gt; Google Cloud Repository(Private) &amp;ndash;&amp;gt; Build Triggers(Cloudbuild.yaml)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// # Sample Cloudbuild.yaml
steps:
- name: &#39;gcr.io/cloud-builders/go&#39;
  args: [&#39;install&#39;, &#39;.&#39;]
  env:  [&#39;PROJECT_ROOT=$REPO_NAME&#39;]

- name: &#39;gcr.io/cloud-zen/kube-doc:latest&#39;
  args: [&#39;go&#39;, &#39;run&#39;, &#39;main.go&#39;]
  env: [&#39;REPO_NAME=$REPO_NAME&#39;]

- name: &#39;gcr.io/cloud-builders/docker&#39;
  args: [&#39;build&#39;, &#39;-t&#39;, &#39;gcr.io/$PROJECT_ID/$REPO_NAME:$REVISION_ID&#39;, &#39;.&#39;]

- name: &#39;gcr.io/cloud-zen/kube-deploy:latest&#39;
  args: [&#39;set&#39;,&#39;image&#39;,&#39;deployments/$REPO_NAME&#39;, &#39;$REPO_NAME=gcr.io/$PROJECT_ID/$REPO_NAME:$REVISION_ID&#39;]

images:
  - &#39;gcr.io/$PROJECT_ID/$REPO_NAME:$REVISION_ID&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before pushing to the Google Cloud Repository, we first set up a trigger to look out for a file named Cloudbuild.yaml.&lt;br /&gt;
&lt;/br&gt;
&lt;img src=&#34;/images/cloudbuild-trigger.png&#34; class=&#34;img-responsive center-block&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Inside the cloudbuild.yaml sample as we have shown above, it will execute a set of instructions and only upon successful execution will it be a successful build. In this sample, the service that we have built is based on go. We will first make use of the built-in docker image by cloudbuilder to run the commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go install
go test ./... (optional)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Followed by which, it will start to build the docker image based on the tags given to it and sends it to the Google Cloud Registry (GCR). The final command to execute would be to pull in a custom docker image that we have built to set the kubenetes system.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Sample  Kube-Deploy Dockerfile
FROM ubuntu:16.04

ENV CLOUDSDK_PYTHON &amp;quot;/usr/bin/python2.7&amp;quot;
ENV PATH /root/google-cloud-sdk/bin:$PATH
ENV CLOUDSDK_PYTHON_SITEPACKAGES 1

# Install dependencies
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y curl &amp;amp;&amp;amp; apt-get install -y python2.7

# Install gcloud
RUN curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
RUN apt-get update
RUN curl https://sdk.cloud.google.com | bash

# Authenticate gcloud
COPY /configs/gcloud /root/.config/gcloud
RUN ls -a /root/.config/gcloud

# Install kubectl
RUN /root/google-cloud-sdk/bin/gcloud components install kubectl

# Set and config cluster
RUN gcloud config set container/cluster cloudzen
RUN gcloud container clusters get-credentials cloudzen

# RUN gcloud auth application-default login
RUN gcloud container clusters describe cloudzen --zone asia-east1-a
RUN gcloud container clusters list --zone asia-east1-a

# Updating the cluster
RUN gcloud container get-server-config --zone=asia-east1-a
RUN gcloud container clusters get-credentials cloudzen --zone asia-east1-a

ENTRYPOINT [&amp;quot;kubectl&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What kube-deploy does is that it installs python, gcloud and kubectl on an ubuntu base image with gcloud authenticated. This allows others services to pull this image to run the kubectl command to set the image in the pod(replica set). With that, you have successful built a integration that helps you build and pull docker images and at the set time set your image for proxy purposes and your services is updated with 0 downtime and without any manual labor (apart from running git push to Google Cloud Repository)&lt;/p&gt;

&lt;h1 id=&#34;appendix:99c9919f0ba2753582d3f233ea09eaec&#34;&gt;Appendix&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;# Sample haproxy.cfg - for kubernetes
global
   log 127.0.0.1 local0
   daemon
#   maxconn 4000
#   debug

defaults
   log global
   mode http

   option http-server-close

   timeout connect 5s
   timeout client 30s
   timeout client-fin 30s
   timeout server 20s
   timeout tunnel 1h

   stats enable
   stats refresh 5s
   stats show-node
   stats uri  /stats/haproxy

frontend www
    bind *:80

    acl is_kube_aglio path_beg /doc
    use_backend kube-aglio-http if is_kube_aglio

    default_backend nomatch

backend nomatch
    errorfile 503 /usr/local/etc/haproxy/errors/404.http

backend kube-aglio-http
    balance roundrobin
    server api1 kube-aglio.default:80 check
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/br&gt;&lt;br /&gt;
Ever developer knows that documentation is the key to everything and one of a nice tool that I&amp;rsquo;ve chanced upon is &lt;a href=&#34;https://apiblueprint.org/&#34;&gt;API Blueprints&lt;/a&gt;. in our current repository, we will have to have a .apib file which contains our documentation is .apib language. We would need some form of way to render it to html. One such tool we can make use of is &lt;a href=&#34;https://github.com/danielgtaylor/aglio&#34;&gt;aglio&lt;/a&gt; which helps us generate themes to come along with our html. All these works well but it comes with a price, what happens when we forget to run the command and push it to the cloud repository, also another problem is that anyone who wants to look at the documentation would have to clone the repository and that is not something that we want. So in the following steps, we would be building a function in go that would take care of passing the .apib in the repository into a google storage bucket.&lt;br /&gt;
&lt;/br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Sample Kube-Doc Custom
func main() {
    bucketName   := &amp;quot;api-doc-build&amp;quot;
    repoName     := os.Getenv(&amp;quot;REPO_NAME&amp;quot;)
    APIBfilePath := os.Getenv(&amp;quot;APIB_FILE_PATH&amp;quot;)
    ctx          := context.Background()

    //Starts the client
    client, err := storage.NewClient(ctx)
    if err != nil {
        log.WithError(err).Fatal(&amp;quot;Authentication Error!&amp;quot;)
    }

    if repoName == &amp;quot;&amp;quot; {
        log.Fatal(&amp;quot;&#39;REPO_NAME&#39; is required&amp;quot;)
    }
    object := fmt.Sprintf(&amp;quot;%s/doc.apib&amp;quot;, repoName)

    doc, err := os.Open(APIBfilePath)
    if err != nil {
        log.Fatal(&amp;quot;APIB File does not exist&amp;quot;)
    }
    defer doc.Close()

    wc := client.Bucket(bucketName).Object(object).NewWriter(ctx)
    if _, err := io.Copy(wc, doc); err != nil {
        log.WithError(err).Fatal(&amp;quot;Error Copying File&amp;quot;)
    }
    if err := wc.Close(); err != nil {
        log.WithError(err).Fatal(&amp;quot;Error Closing Client&amp;quot;)
    }
    // Close the client when finished.
    if err := client.Close(); err != nil {
        log.WithError(err).Fatal(&amp;quot;Error Closing Client&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you build a docker image with this custom go script, what it does is that it will throw the .apib file in the repository that is pulling the image into a bucket. The question now is that we would want to create a custom server that is capable of allowing the developers to use our api without needing to clone our repository or having to use the aglio command manually.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Sample Dockerfile for Running Node Server
FROM node:boron

# Create app directory
RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

# Install app dependencies
COPY package.json /usr/src/app/
RUN npm install

# Bundle app source
COPY . /usr/src/app

EXPOSE 8080
CMD [ &amp;quot;npm&amp;quot;, &amp;quot;start&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// Sample Index.js
&#39;use strict&#39;;
const express = require(&#39;express&#39;);
const aglio = require(&#39;aglio&#39;);
const gcs = require(&#39;@google-cloud/storage&#39;)({
    projectId: &#39;$projectID&#39;
});
const bucket = gcs.bucket(process.env.GCS_BUCKET || &#39;api-doc-build&#39;);

// Configure express app
const app = express();
app.set(&#39;views&#39;, __dirname + &#39;/views&#39;);
app.engine(&#39;html&#39;, require(&#39;ejs&#39;).renderFile);

app.get(&#39;/doc&#39;, (req, res) =&amp;gt; {
    return bucket.getFiles((err, files) =&amp;gt; {
        if (err !== null) {
            // files is an array of File objects.
            console.log(err);
            return res.status(500).send({error: &#39;error getting files&#39;});
        }

        res.render(&#39;index.html&#39;, {
            docs: files.map((file) =&amp;gt; {
                return file.id.split(&amp;quot;%&amp;quot;)[0];
            })
        });
    });
});

app.get(&#39;/doc/:repo&#39;, (req, res) =&amp;gt; {
    let fileData = new Buffer(&#39;&#39;);
    const repo = req.param(&amp;quot;repo&amp;quot;);
    const remoteFile = bucket.file(`${repo}/${process.env.APIB_FILE_NAME || &#39;doc.apib&#39;}`);

    // Validate
    if (repo === &amp;quot;&amp;quot;) {
        return res.status(400).send({error: `Invalid repo name`});
    }

    // Download file from GCS bucket
    return remoteFile.createReadStream()
        .on(&#39;error&#39;, function(err) {
            console.log(&#39;Error:&#39;, err);
            return res.status(404).send({error: &#39;404 File not found&#39;});
        })
        .on(&#39;data&#39;, function(chunk) {
            fileData = Buffer.concat([fileData, chunk]);
        })
        .on(&#39;end&#39;, function() {
            // The file is fully downloaded.
            fileData = fileData.toString();
            if (fileData === undefined || fileData === &amp;quot;&amp;quot;) {
                return res.status(500).send({error: `${process.env.APIB_FILE_NAME} document can not be empty`});
            }

            return aglio.render(fileData, {
                themeVariables: process.env.THEME || &#39;default&#39;
            }, (err, html) =&amp;gt; {
                if (err !== null) {
                    return res.status(500).send({error: err});
                }
                return res.send(html);
            });
        });
});

app.listen(process.env.HTTP_PORT || 8080);
console.log(`Running on :${process.env.HTTP_PORT || 8080}`);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/br&gt;
This script above downloads the .apib file from the GCS bucket and later renders it on a &lt;a href=&#34;https://expressjs.com/&#34;&gt;node express server&lt;/a&gt;. With that, you have just been through the basic fundamentals of continous integration!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>China Infrastructure Deployment</title>
      <link>/2017/04/14/china-deployment/</link>
      <pubDate>Fri, 14 Apr 2017 13:50:46 +0200</pubDate>
      
      <guid>/2017/04/14/china-deployment/</guid>
      <description>&lt;p&gt;In this blog, we will be exploring the way of deploying the current service infrasture that you have built locally to deploying it on a server in china via Alibaba Cloud aka Aliyun.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Before starting on this tutorial, the following should be done:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Services Created and running locally.&lt;/li&gt;
&lt;li&gt;Ensure DockerFile have been build.&lt;/li&gt;
&lt;li&gt;Understanding of &lt;a href=&#34;https://docs.docker.com/engine/getstarted/step_four/&#34;&gt;Docker&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://hub.docker.com/_/haproxy/&#34;&gt;HAProxy&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Successful Implementation&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Register an account with both Aliyun CN and INTL Account&lt;/li&gt;
&lt;li&gt;Login into the CN account &amp;amp; Create an &lt;a href=&#34;https://m.aliyun.com/yunqi/articles/9102&#34;&gt;Image WareHouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;At this point, you should have successful push the built docker image to aliyun registry store.&lt;/li&gt;
&lt;li&gt;Now, we proceed to Creating an ECS Instance (2 core, 8GB Ram, Ubuntu 16.0.4)&lt;/li&gt;
&lt;li&gt;After creating an instance, you will be given an Internet Address of that Instance.&lt;/li&gt;
&lt;li&gt;Proceed to SSH (or Putty for Windows) into the virtual machine.&lt;/li&gt;
&lt;li&gt;Install &lt;a href=&#34;https://docs.docker.com/engine/getstarted/step_one/&#34;&gt;Docker&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;Docker Compose&lt;/a&gt; in the ECS Machine&lt;/li&gt;
&lt;li&gt;Create a &lt;a href=&#34;https://docs.docker.com/compose/compose-file/compose-file-v2/#dependson&#34;&gt;docker-compose.yml&lt;/a&gt; file in a directory in the Ubuntu Machine&lt;/li&gt;
&lt;li&gt;Ensure that HAProxy is the first image you build. You can check the statistics after building the image via http://”Internet IP”/stats/haproxy&lt;/li&gt;
&lt;li&gt;Run&lt;code&gt;Docker-Compose Up&lt;/code&gt; and ensure that services are connected and working.&lt;/li&gt;
&lt;li&gt;Enjoy&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;FAQ&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why do we have both an intl and cn aliyun account?&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Currently the intl account do not have the the registry image warehouse and is only available in the cn aliyun account. The reason why we do not do everything in the cn aliyun account is because it requires a &amp;ldquo;real-name&amp;rdquo; authentication that we currently do not possess and is unable to do.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Why do we not use container service?&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Facing difficulties with Container Services linking multi containers services. Creating a custom image from the services provided in the international account could not pull from the registry properly. Orchestration templates formats in building the multi containers link file have to be in Aliyun’s format context.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Why did we have to set up OpenVPN through Digital Ocean?&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accessing Aliyun Cloud Website from Singapore would redirect us to the Internal Version of the website which did not provide us with the features we require. Proxy would not work as it does not enable scripting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Why didn’t we use third party registry such as docker hub?&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The main reason behind not using third-party registry is that they are costly. Another reason is that we will never know when the china’s firewall will block connection from external sources. Integration with third party registry might not be as optimised. Moreover, ensuring all registries have to be in ‘private’ mode.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Fitness &amp; Health - Reducing Your Age</title>
      <link>/2017/04/07/reducing-your-age/</link>
      <pubDate>Fri, 07 Apr 2017 13:50:46 +0200</pubDate>
      
      <guid>/2017/04/07/reducing-your-age/</guid>
      <description>

&lt;h2 id=&#34;introduction:58895d2b4469bca4d9b2bd5de1cab8f2&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Death is a mystery. It is a scary darkness that is almost impossible to fanthom. If life is like a game, some people think that you would respawn in a different place, some people think that you replay the good bits of life in your brain over again, some people think that you enter a different dimension.&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/gWIi6Pytde8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;/br&gt;
The question begins as logical thinker, is there a way to cheat death? How can we extend our life way beyond the natural lifespan apart from uploading our conscience into the net or making use of &lt;a href=&#34;http://www.nbcnews.com/tech/innovation/company-will-freeze-your-dead-body-200-000-n562551&#34;&gt;cryopreservation&lt;/a&gt;. One possible way we could do this is by reducing our biological age to ensure that our system is always up and running together with some tissue regeneration.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;High Intensity Interval Training (HIIT) 15mins/day - Strength/Resistance

&lt;ul&gt;
&lt;li&gt;This will not only help to improve your fitness levels but help you to feel energetic through the day!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Sleep 7-8 Hours a day

&lt;ul&gt;
&lt;li&gt;Sleep Deprivation can cause your life span to shorten by miles. Read more about it &lt;a href=&#34;http://www.webmd.com/sleep-disorders/features/10-results-sleep-loss#1&#34;&gt;here&lt;/a&gt; Use the &lt;a href=&#34;http://sleepcalculator.com/&#34;&gt;sleep calculator&lt;/a&gt; to help plan your sleep better&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/post/losing-weight/&#34;&gt;Limit Toxins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pocketmindfulness.com/6-mindfulness-exercises-you-can-try-today/&#34;&gt;Healthy Mind - Meditation &amp;amp; Yoga&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Social Connection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Always remember that to live a long life is to lead a life with a healthy mind and body. You can begin to see results in 2 weeks just by removing toxins from your body and building a healthy mind through mediation exercises. HIIT exercises with a restful sleep will work hand in hand to making you feel more positive in life and feeling younger, easing up the things that you were incapable of doing efficiently as before.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploying Hugo On AWS</title>
      <link>/2017/03/31/deploy-blog/</link>
      <pubDate>Fri, 31 Mar 2017 13:50:46 +0200</pubDate>
      
      <guid>/2017/03/31/deploy-blog/</guid>
      <description>

&lt;h2 id=&#34;introduction:0d32955f59fd6f5a89b50ad05ace433e&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Initially, I have been using Web Hosting Hub with wordpress installed with it to run my website. I got my domain name from OpenSRS. I am quite happy with their services and support. However, It has come to the point that I am clearly paying too much for just hosting a blog which stood at about 13 bucks a month.&lt;/p&gt;

&lt;p&gt;This is where I chanced upon Amazon Web Services. Not being a good front-end developer, I went around in search of a template where I found Hugo, a static web builder developed with Golang. Below list the ways i went around trying to switch from web hosting hub to AWS. It was a rather fruitful experience as my overhead became less than 1 dollar a month.&lt;/p&gt;

&lt;p&gt;Feel free to view a step by step tutorial on deploying hugo with Amazon Web Services by &lt;a href=&#34;http://bezdelev.com/post/hugo-aws-lambda-static-website/&#34;&gt;Ilya Bezdelev&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a nutshell, key points that you should note involves:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hugo website

&lt;ul&gt;
&lt;li&gt;Follow Hugo Tutorial on Creating Website &lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;example.com bucket

&lt;ul&gt;
&lt;li&gt;serves the website content&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;www.example.com bucket

&lt;ul&gt;
&lt;li&gt;redirects to example.com endpoint&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;input.example.com bucket&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;contains all hugo related files&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Default AWS Endpoint Domain Name&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Storage Buckets (used for containing Hugo files and serving web pages to visitors to site)&lt;/li&gt;
&lt;li&gt;Lambda ( piece of code that triggers downloading of static files from hugo input to output bucket)
&lt;/br&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Custom Domain Name&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CloudFront Distribution (CDN)&lt;/li&gt;
&lt;li&gt;Route 53
&lt;/br&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Security of AWS resources will be managed by Identity &amp;amp; Access Management(IAM)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;AWS CloudFront consist of CDN which helps to speed up your website by&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Route 53 is used as a DNS Service as well as Domain Name Registration&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Amazon Route 53 is an authoritative Domain Name System (DNS) service. DNS is the system that translates human-readable domain names (example.com) into IP addresses (192.0.2.0). With authoritative name servers in data centers all over the world, Route 53 is reliable, scalable, and fast.
TLD = Top Level Domain&lt;/p&gt;

&lt;p&gt;With all these in hand, Begin your journey to hosting your very own blog.&lt;/p&gt;

&lt;p&gt;Remember &amp;ndash;&amp;gt; Create Hugo Website &amp;ndash;&amp;gt; Create AWS Web Service &amp;ndash;&amp;gt; Create S3 to store Hugo Files &amp;ndash;&amp;gt; DNS with hosted zone to serve your example.com to the world.&lt;br /&gt;
&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: feel free to read up more about &lt;a href=&#34;https://gohugo.io/overview/introduction/&#34;&gt;Hugo&lt;/a&gt; to find out about the other ways to host Hugo files. A free alternative would be netlify!&lt;/em&gt;
&lt;em&gt;PS - Web Hosting Hub Support is Excellent&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simply Said - Weight Loss</title>
      <link>/2017/03/24/losing-weight/</link>
      <pubDate>Fri, 24 Mar 2017 13:50:46 +0200</pubDate>
      
      <guid>/2017/03/24/losing-weight/</guid>
      <description>

&lt;h2 id=&#34;introduction:2a6df08cfb9fb412b51236fed6d7b759&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Losing weight can be painfu and may seem impossible for some others. Even something as simple as counting calories can be exhausting. Been there, done that, backfired and ruined. I proceeded to explore betters ways to lose weight, below includes some of the measures that I have chanced upon that helps you to lose weight without losing your life and sense of self.&lt;/p&gt;

&lt;p&gt;Losing weight does not mean that it is about going on a diet that causes you immense emotional pain. To help increase your metabolism, you can use 2 types of method, either by drinking honey cinnamon water or a ginger lemon tea.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/cinnamon.jpg&#34; class=&#34;img-responsive center-block&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;preparations-include:2a6df08cfb9fb412b51236fed6d7b759&#34;&gt;Preparations include&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;1 tsp of Honey&lt;/li&gt;
&lt;li&gt;1 tsp of Ceylon Cinnamon&lt;/li&gt;
&lt;li&gt;250ml of Hot Water&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stir well, allow it to rest for 10 minutes and proceed to drink in the morning just after you wake up.
+ Ginger Lemon Tea&lt;br /&gt;
&lt;img src=&#34;/images/ginger.jpg&#34; class=&#34;img-responsive center-block&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;preparations-include-1:2a6df08cfb9fb412b51236fed6d7b759&#34;&gt;Preparations include&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Simmer Ginger with Water for 30 minutes&lt;/li&gt;
&lt;li&gt;Add Lemon Slices
Stir well, simmer for 20 minutes and proceed to drink after
You can read more about the benefits of honey, the differences between Cassia &amp;amp; Ceylon Cinnamon by clicking on the keywords.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these will aid you in increasing your metabolism to allow fats to be burn faster and easier. To further increase your weight loss process and helping to keep your body in a better condition, proceed to lift weights/ perform resistance training up to 3 times/ week. Training should only can be done as between 15-45 minutes. Refer to &lt;a href=&#34;http://darebee.com/&#34;&gt;Darebee&lt;/a&gt; for training programmes in which you can follow especially the workout cards.
&lt;/br&gt;
&lt;/br&gt;&lt;/p&gt;

&lt;h4 id=&#34;disclaimer:2a6df08cfb9fb412b51236fed6d7b759&#34;&gt;Disclaimer&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Use raw organic honey with no sugars.&lt;/li&gt;
&lt;li&gt;For every 1 cup of water : (1 Tbsp of Honey, &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; Tbsp of Ceylon Cinnamon)&lt;/li&gt;
&lt;li&gt;Keep carbohydrates and sugar intake to a minimum level. &lt;strong&gt;Note: Minimum not None&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Types of Developers</title>
      <link>/2017/03/17/developer-stack/</link>
      <pubDate>Fri, 17 Mar 2017 13:50:46 +0200</pubDate>
      
      <guid>/2017/03/17/developer-stack/</guid>
      <description>

&lt;h2 id=&#34;introduction:0dffff2cb65dbc16f91c6c6939b26f12&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Congratulations to taking your first step into the world of development. When you hear the word &amp;ldquo;programmer&amp;rdquo;, what first comes to your mind? Are there different type of programmers? If they are, what kind of programmers are they?&lt;/p&gt;

&lt;p&gt;Generically speaking, there are many different types of programmers. Each with different roles, skillsets and mindset. In today&amp;rsquo;s context, I will be talking about 5 different kind of programmers. So lets begin!&lt;/p&gt;

&lt;p&gt;Programmers are broken down into:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web Developers

&lt;ul&gt;
&lt;li&gt;Short Answer: They build and maintain website. You can get a more detailed explaination &lt;a href=&#34;http://www.theodinproject.com/courses/introduction-to-web-development/lessons/what-a-web-developer-does&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Application Developer&lt;/li&gt;
&lt;li&gt;Game Developer&lt;/li&gt;
&lt;li&gt;UI Developer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you branch into any of the fields, all of them will have 2 different sub-categories which will be front-end and back-end developer. So your title could be something like a Front-End Web Developer or a Back-End Application Developer. For the more ambitious, they can proceed to becoming a full-stack developer whereby they would be able to handle both the front-end and back-end aspect of the application that they are building.&lt;/p&gt;

&lt;h3 id=&#34;important-distinctions:0dffff2cb65dbc16f91c6c6939b26f12&#34;&gt;Important Distinctions&lt;/h3&gt;

&lt;h4 id=&#34;front-end-developer:0dffff2cb65dbc16f91c6c6939b26f12&#34;&gt;Front-End Developer?&lt;/h4&gt;

&lt;p&gt;&amp;ldquo;Front End&amp;rdquo; typically refers to the stuff that you actually see on the website in the browser. Languages that they primarily focus on includes: HTML, CSS, Javascript, JQuery and React.js. Despite being in charge of making things that appear to the visitor&amp;rsquo;s eyes, the &amp;ldquo;pretty&amp;rdquo; website is still designed by another person with the role of a &amp;ldquo;designer&amp;rdquo;. Some of the things they do include making buttons, menus, formatting of texts, transitions and modals.&lt;/p&gt;

&lt;h4 id=&#34;back-end-developer:0dffff2cb65dbc16f91c6c6939b26f12&#34;&gt;Back-End Developer?&lt;/h4&gt;

&lt;p&gt;&amp;ldquo;Back End&amp;rdquo; typically refers to the stuff that happens behind-the-scene. They are more focused on connecting the website request to the correct services which would include ensuring that the right data are passing through the browser, connecting services to databases, implementing infrastructure and mapping the ports of the services. They ensure that all the buttons and data collected are moving as intended.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>